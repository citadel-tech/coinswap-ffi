// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(coinswapFFI)
import coinswapFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_coinswap_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_coinswap_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureCoinswapFfiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol TakerProtocol: AnyObject, Sendable {
    
    /**
     * Get wallet balances
     */
    func getWalletBalances() throws  -> Balances
    
    func getWalletName() throws  -> String
    
    func sendCoinswap(swapParams: SwapParams) throws 
    
    func syncWallet() throws 
    
}
open class Taker: TakerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_coinswap_ffi_fn_clone_taker(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_coinswap_ffi_fn_free_taker(pointer, $0) }
    }

    
public static func `init`(dataDir: String?, walletFileName: String?, rpcConfig: RpcConfig?, behavior: TakerBehavior?, controlPort: UInt16?, torAuthPassword: String?)throws  -> Taker  {
    return try  FfiConverterTypeTaker_lift(try rustCallWithError(FfiConverterTypeTakerError_lift) {
    uniffi_coinswap_ffi_fn_constructor_taker_init(
        FfiConverterOptionString.lower(dataDir),
        FfiConverterOptionString.lower(walletFileName),
        FfiConverterOptionTypeRPCConfig.lower(rpcConfig),
        FfiConverterOptionTypeTakerBehavior.lower(behavior),
        FfiConverterOptionUInt16.lower(controlPort),
        FfiConverterOptionString.lower(torAuthPassword),$0
    )
})
}
    

    
    /**
     * Get wallet balances
     */
open func getWalletBalances()throws  -> Balances  {
    return try  FfiConverterTypeBalances_lift(try rustCallWithError(FfiConverterTypeTakerError_lift) {
    uniffi_coinswap_ffi_fn_method_taker_get_wallet_balances(self.uniffiClonePointer(),$0
    )
})
}
    
open func getWalletName()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeTakerError_lift) {
    uniffi_coinswap_ffi_fn_method_taker_get_wallet_name(self.uniffiClonePointer(),$0
    )
})
}
    
open func sendCoinswap(swapParams: SwapParams)throws   {try rustCallWithError(FfiConverterTypeTakerError_lift) {
    uniffi_coinswap_ffi_fn_method_taker_send_coinswap(self.uniffiClonePointer(),
        FfiConverterTypeSwapParams_lower(swapParams),$0
    )
}
}
    
open func syncWallet()throws   {try rustCallWithError(FfiConverterTypeTakerError_lift) {
    uniffi_coinswap_ffi_fn_method_taker_sync_wallet(self.uniffiClonePointer(),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTaker: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Taker

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Taker {
        return Taker(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Taker) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Taker {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Taker, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTaker_lift(_ pointer: UnsafeMutableRawPointer) throws -> Taker {
    return try FfiConverterTypeTaker.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTaker_lower(_ value: Taker) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTaker.lower(value)
}






public protocol WalletProtocol: AnyObject, Sendable {
    
}
open class Wallet: WalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_coinswap_ffi_fn_clone_wallet(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_coinswap_ffi_fn_free_wallet(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
    return try FfiConverterTypeWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWallet_lower(_ value: Wallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWallet.lower(value)
}




public struct Balances {
    public var regular: UInt64
    public var swap: UInt64
    public var contract: UInt64
    public var fidelity: UInt64
    public var spendable: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(regular: UInt64, swap: UInt64, contract: UInt64, fidelity: UInt64, spendable: UInt64) {
        self.regular = regular
        self.swap = swap
        self.contract = contract
        self.fidelity = fidelity
        self.spendable = spendable
    }
}

#if compiler(>=6)
extension Balances: Sendable {}
#endif


extension Balances: Equatable, Hashable {
    public static func ==(lhs: Balances, rhs: Balances) -> Bool {
        if lhs.regular != rhs.regular {
            return false
        }
        if lhs.swap != rhs.swap {
            return false
        }
        if lhs.contract != rhs.contract {
            return false
        }
        if lhs.fidelity != rhs.fidelity {
            return false
        }
        if lhs.spendable != rhs.spendable {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(regular)
        hasher.combine(swap)
        hasher.combine(contract)
        hasher.combine(fidelity)
        hasher.combine(spendable)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBalances: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Balances {
        return
            try Balances(
                regular: FfiConverterUInt64.read(from: &buf), 
                swap: FfiConverterUInt64.read(from: &buf), 
                contract: FfiConverterUInt64.read(from: &buf), 
                fidelity: FfiConverterUInt64.read(from: &buf), 
                spendable: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Balances, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.regular, into: &buf)
        FfiConverterUInt64.write(value.swap, into: &buf)
        FfiConverterUInt64.write(value.contract, into: &buf)
        FfiConverterUInt64.write(value.fidelity, into: &buf)
        FfiConverterUInt64.write(value.spendable, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalances_lift(_ buf: RustBuffer) throws -> Balances {
    return try FfiConverterTypeBalances.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalances_lower(_ value: Balances) -> RustBuffer {
    return FfiConverterTypeBalances.lower(value)
}


public struct RpcConfig {
    public var url: String
    public var username: String
    public var password: String
    public var walletName: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(url: String, username: String, password: String, walletName: String) {
        self.url = url
        self.username = username
        self.password = password
        self.walletName = walletName
    }
}

#if compiler(>=6)
extension RpcConfig: Sendable {}
#endif


extension RpcConfig: Equatable, Hashable {
    public static func ==(lhs: RpcConfig, rhs: RpcConfig) -> Bool {
        if lhs.url != rhs.url {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        if lhs.password != rhs.password {
            return false
        }
        if lhs.walletName != rhs.walletName {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
        hasher.combine(username)
        hasher.combine(password)
        hasher.combine(walletName)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRPCConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RpcConfig {
        return
            try RpcConfig(
                url: FfiConverterString.read(from: &buf), 
                username: FfiConverterString.read(from: &buf), 
                password: FfiConverterString.read(from: &buf), 
                walletName: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: RpcConfig, into buf: inout [UInt8]) {
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterString.write(value.username, into: &buf)
        FfiConverterString.write(value.password, into: &buf)
        FfiConverterString.write(value.walletName, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRPCConfig_lift(_ buf: RustBuffer) throws -> RpcConfig {
    return try FfiConverterTypeRPCConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRPCConfig_lower(_ value: RpcConfig) -> RustBuffer {
    return FfiConverterTypeRPCConfig.lower(value)
}


public struct SwapParams {
    /**
     * Total Amount
     */
    public var sendAmount: UInt64
    /**
     * How many hops (number of makers)
     */
    public var makerCount: UInt32
    /**
     * User selected UTXOs (optional)
     */
    public var manuallySelectedOutpoints: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Total Amount
         */sendAmount: UInt64, 
        /**
         * How many hops (number of makers)
         */makerCount: UInt32, 
        /**
         * User selected UTXOs (optional)
         */manuallySelectedOutpoints: [String]?) {
        self.sendAmount = sendAmount
        self.makerCount = makerCount
        self.manuallySelectedOutpoints = manuallySelectedOutpoints
    }
}

#if compiler(>=6)
extension SwapParams: Sendable {}
#endif


extension SwapParams: Equatable, Hashable {
    public static func ==(lhs: SwapParams, rhs: SwapParams) -> Bool {
        if lhs.sendAmount != rhs.sendAmount {
            return false
        }
        if lhs.makerCount != rhs.makerCount {
            return false
        }
        if lhs.manuallySelectedOutpoints != rhs.manuallySelectedOutpoints {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sendAmount)
        hasher.combine(makerCount)
        hasher.combine(manuallySelectedOutpoints)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSwapParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwapParams {
        return
            try SwapParams(
                sendAmount: FfiConverterUInt64.read(from: &buf), 
                makerCount: FfiConverterUInt32.read(from: &buf), 
                manuallySelectedOutpoints: FfiConverterOptionSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: SwapParams, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.sendAmount, into: &buf)
        FfiConverterUInt32.write(value.makerCount, into: &buf)
        FfiConverterOptionSequenceString.write(value.manuallySelectedOutpoints, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSwapParams_lift(_ buf: RustBuffer) throws -> SwapParams {
    return try FfiConverterTypeSwapParams.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSwapParams_lower(_ value: SwapParams) -> RustBuffer {
    return FfiConverterTypeSwapParams.lower(value)
}


public struct WalletBackup {
    public var fileName: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fileName: String) {
        self.fileName = fileName
    }
}

#if compiler(>=6)
extension WalletBackup: Sendable {}
#endif


extension WalletBackup: Equatable, Hashable {
    public static func ==(lhs: WalletBackup, rhs: WalletBackup) -> Bool {
        if lhs.fileName != rhs.fileName {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fileName)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletBackup: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletBackup {
        return
            try WalletBackup(
                fileName: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: WalletBackup, into buf: inout [UInt8]) {
        FfiConverterString.write(value.fileName, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletBackup_lift(_ buf: RustBuffer) throws -> WalletBackup {
    return try FfiConverterTypeWalletBackup.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletBackup_lower(_ value: WalletBackup) -> RustBuffer {
    return FfiConverterTypeWalletBackup.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Destination {
    
    case sweep(address: String
    )
    case multi(outputs: [String: UInt64], opReturnData: Data?
    )
    case multiDynamic(amount: UInt64, addresses: [String]
    )
}


#if compiler(>=6)
extension Destination: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDestination: FfiConverterRustBuffer {
    typealias SwiftType = Destination

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Destination {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sweep(address: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .multi(outputs: try FfiConverterDictionaryStringUInt64.read(from: &buf), opReturnData: try FfiConverterOptionData.read(from: &buf)
        )
        
        case 3: return .multiDynamic(amount: try FfiConverterUInt64.read(from: &buf), addresses: try FfiConverterSequenceString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Destination, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .sweep(address):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(address, into: &buf)
            
        
        case let .multi(outputs,opReturnData):
            writeInt(&buf, Int32(2))
            FfiConverterDictionaryStringUInt64.write(outputs, into: &buf)
            FfiConverterOptionData.write(opReturnData, into: &buf)
            
        
        case let .multiDynamic(amount,addresses):
            writeInt(&buf, Int32(3))
            FfiConverterUInt64.write(amount, into: &buf)
            FfiConverterSequenceString.write(addresses, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDestination_lift(_ buf: RustBuffer) throws -> Destination {
    return try FfiConverterTypeDestination.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDestination_lower(_ value: Destination) -> RustBuffer {
    return FfiConverterTypeDestination.lower(value)
}


extension Destination: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TakerBehavior {
    
    case normal
    case dropConnectionAfterFullSetup
    case broadcastContractAfterFullSetup
}


#if compiler(>=6)
extension TakerBehavior: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTakerBehavior: FfiConverterRustBuffer {
    typealias SwiftType = TakerBehavior

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TakerBehavior {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .normal
        
        case 2: return .dropConnectionAfterFullSetup
        
        case 3: return .broadcastContractAfterFullSetup
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TakerBehavior, into buf: inout [UInt8]) {
        switch value {
        
        
        case .normal:
            writeInt(&buf, Int32(1))
        
        
        case .dropConnectionAfterFullSetup:
            writeInt(&buf, Int32(2))
        
        
        case .broadcastContractAfterFullSetup:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTakerBehavior_lift(_ buf: RustBuffer) throws -> TakerBehavior {
    return try FfiConverterTypeTakerBehavior.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTakerBehavior_lower(_ value: TakerBehavior) -> RustBuffer {
    return FfiConverterTypeTakerBehavior.lower(value)
}


extension TakerBehavior: Equatable, Hashable {}







public enum TakerError: Swift.Error {

    
    
    case Wallet(msg: String
    )
    case Protocol(msg: String
    )
    case Network(msg: String
    )
    case General(msg: String
    )
    case Io(msg: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTakerError: FfiConverterRustBuffer {
    typealias SwiftType = TakerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TakerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Wallet(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 2: return .Protocol(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 3: return .Network(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 4: return .General(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 5: return .Io(
            msg: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TakerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Wallet(msg):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .Protocol(msg):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .Network(msg):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .General(msg):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .Io(msg):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(msg, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTakerError_lift(_ buf: RustBuffer) throws -> TakerError {
    return try FfiConverterTypeTakerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTakerError_lower(_ value: TakerError) -> RustBuffer {
    return FfiConverterTypeTakerError.lower(value)
}


extension TakerError: Equatable, Hashable {}




extension TakerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum WalletError: Swift.Error {

    
    
    case Io(msg: String
    )
    case Rpc(msg: String
    )
    case General(msg: String
    )
    case Json(msg: String
    )
    case Network(msg: String
    )
    case AddressParse(msg: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletError: FfiConverterRustBuffer {
    typealias SwiftType = WalletError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Io(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 2: return .Rpc(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 3: return .General(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 4: return .Json(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 5: return .Network(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 6: return .AddressParse(
            msg: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Io(msg):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .Rpc(msg):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .General(msg):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .Json(msg):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .Network(msg):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .AddressParse(msg):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(msg, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletError_lift(_ buf: RustBuffer) throws -> WalletError {
    return try FfiConverterTypeWalletError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletError_lower(_ value: WalletError) -> RustBuffer {
    return FfiConverterTypeWalletError.lower(value)
}


extension WalletError: Equatable, Hashable {}




extension WalletError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeRPCConfig: FfiConverterRustBuffer {
    typealias SwiftType = RpcConfig?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRPCConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRPCConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTakerBehavior: FfiConverterRustBuffer {
    typealias SwiftType = TakerBehavior?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTakerBehavior.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTakerBehavior.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringUInt64: FfiConverterRustBuffer {
    public static func write(_ value: [String: UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterUInt64.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: UInt64] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: UInt64]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterUInt64.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func createDefaultRpcConfig() -> RpcConfig  {
    return try!  FfiConverterTypeRPCConfig_lift(try! rustCall() {
    uniffi_coinswap_ffi_fn_func_create_default_rpc_config($0
    )
})
}
public func createSwapParams(sendAmountSats: UInt64, makerCount: UInt32, outpoints: [String]) -> SwapParams  {
    return try!  FfiConverterTypeSwapParams_lift(try! rustCall() {
    uniffi_coinswap_ffi_fn_func_create_swap_params(
        FfiConverterUInt64.lower(sendAmountSats),
        FfiConverterUInt32.lower(makerCount),
        FfiConverterSequenceString.lower(outpoints),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_coinswap_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_coinswap_ffi_checksum_func_create_default_rpc_config() != 9423) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_coinswap_ffi_checksum_func_create_swap_params() != 14523) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_coinswap_ffi_checksum_method_taker_get_wallet_balances() != 36988) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_coinswap_ffi_checksum_method_taker_get_wallet_name() != 45636) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_coinswap_ffi_checksum_method_taker_send_coinswap() != 5303) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_coinswap_ffi_checksum_method_taker_sync_wallet() != 64892) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_coinswap_ffi_checksum_constructor_taker_init() != 56903) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureCoinswapFfiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all