

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_coinswap_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_coinswap_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_coinswap_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("coinswap_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 29
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_coinswap_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_coinswap_ffi_checksum_func_create_default_rpc_config() != 9423:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_coinswap_ffi_checksum_func_create_swap_params() != 14523:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_coinswap_ffi_checksum_method_taker_get_wallet_balances() != 36988:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_coinswap_ffi_checksum_method_taker_get_wallet_name() != 45636:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_coinswap_ffi_checksum_method_taker_send_coinswap() != 5303:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_coinswap_ffi_checksum_method_taker_sync_wallet() != 64892:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_coinswap_ffi_checksum_constructor_taker_init() != 56903:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_coinswap_ffi_fn_clone_taker.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_clone_taker.restype = ctypes.c_void_p
_UniffiLib.uniffi_coinswap_ffi_fn_free_taker.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_free_taker.restype = None
_UniffiLib.uniffi_coinswap_ffi_fn_constructor_taker_init.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_constructor_taker_init.restype = ctypes.c_void_p
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_get_wallet_balances.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_get_wallet_balances.restype = _UniffiRustBuffer
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_get_wallet_name.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_get_wallet_name.restype = _UniffiRustBuffer
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_send_coinswap.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_send_coinswap.restype = None
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_sync_wallet.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_sync_wallet.restype = None
_UniffiLib.uniffi_coinswap_ffi_fn_clone_wallet.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_clone_wallet.restype = ctypes.c_void_p
_UniffiLib.uniffi_coinswap_ffi_fn_free_wallet.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_free_wallet.restype = None
_UniffiLib.uniffi_coinswap_ffi_fn_func_create_default_rpc_config.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_func_create_default_rpc_config.restype = _UniffiRustBuffer
_UniffiLib.uniffi_coinswap_ffi_fn_func_create_swap_params.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_coinswap_ffi_fn_func_create_swap_params.restype = _UniffiRustBuffer
_UniffiLib.ffi_coinswap_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_coinswap_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_coinswap_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_coinswap_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_coinswap_ffi_rust_future_free_void.restype = None
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_coinswap_ffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_coinswap_ffi_checksum_func_create_default_rpc_config.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_func_create_default_rpc_config.restype = ctypes.c_uint16
_UniffiLib.uniffi_coinswap_ffi_checksum_func_create_swap_params.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_func_create_swap_params.restype = ctypes.c_uint16
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_get_wallet_balances.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_get_wallet_balances.restype = ctypes.c_uint16
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_get_wallet_name.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_get_wallet_name.restype = ctypes.c_uint16
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_send_coinswap.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_send_coinswap.restype = ctypes.c_uint16
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_sync_wallet.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_method_taker_sync_wallet.restype = ctypes.c_uint16
_UniffiLib.uniffi_coinswap_ffi_checksum_constructor_taker_init.argtypes = (
)
_UniffiLib.uniffi_coinswap_ffi_checksum_constructor_taker_init.restype = ctypes.c_uint16
_UniffiLib.ffi_coinswap_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_coinswap_ffi_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.read_u16()

    @staticmethod
    def write(value, buf):
        buf.write_u16(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)






class Balances:
    regular: "int"
    swap: "int"
    contract: "int"
    fidelity: "int"
    spendable: "int"
    def __init__(self, *, regular: "int", swap: "int", contract: "int", fidelity: "int", spendable: "int"):
        self.regular = regular
        self.swap = swap
        self.contract = contract
        self.fidelity = fidelity
        self.spendable = spendable

    def __str__(self):
        return "Balances(regular={}, swap={}, contract={}, fidelity={}, spendable={})".format(self.regular, self.swap, self.contract, self.fidelity, self.spendable)

    def __eq__(self, other):
        if self.regular != other.regular:
            return False
        if self.swap != other.swap:
            return False
        if self.contract != other.contract:
            return False
        if self.fidelity != other.fidelity:
            return False
        if self.spendable != other.spendable:
            return False
        return True

class _UniffiConverterTypeBalances(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Balances(
            regular=_UniffiConverterUInt64.read(buf),
            swap=_UniffiConverterUInt64.read(buf),
            contract=_UniffiConverterUInt64.read(buf),
            fidelity=_UniffiConverterUInt64.read(buf),
            spendable=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.regular)
        _UniffiConverterUInt64.check_lower(value.swap)
        _UniffiConverterUInt64.check_lower(value.contract)
        _UniffiConverterUInt64.check_lower(value.fidelity)
        _UniffiConverterUInt64.check_lower(value.spendable)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.regular, buf)
        _UniffiConverterUInt64.write(value.swap, buf)
        _UniffiConverterUInt64.write(value.contract, buf)
        _UniffiConverterUInt64.write(value.fidelity, buf)
        _UniffiConverterUInt64.write(value.spendable, buf)


class RpcConfig:
    url: "str"
    username: "str"
    password: "str"
    wallet_name: "str"
    def __init__(self, *, url: "str", username: "str", password: "str", wallet_name: "str"):
        self.url = url
        self.username = username
        self.password = password
        self.wallet_name = wallet_name

    def __str__(self):
        return "RpcConfig(url={}, username={}, password={}, wallet_name={})".format(self.url, self.username, self.password, self.wallet_name)

    def __eq__(self, other):
        if self.url != other.url:
            return False
        if self.username != other.username:
            return False
        if self.password != other.password:
            return False
        if self.wallet_name != other.wallet_name:
            return False
        return True

class _UniffiConverterTypeRpcConfig(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RpcConfig(
            url=_UniffiConverterString.read(buf),
            username=_UniffiConverterString.read(buf),
            password=_UniffiConverterString.read(buf),
            wallet_name=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.url)
        _UniffiConverterString.check_lower(value.username)
        _UniffiConverterString.check_lower(value.password)
        _UniffiConverterString.check_lower(value.wallet_name)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.url, buf)
        _UniffiConverterString.write(value.username, buf)
        _UniffiConverterString.write(value.password, buf)
        _UniffiConverterString.write(value.wallet_name, buf)


class SwapParams:
    send_amount: "int"
    """
    Total Amount
    """

    maker_count: "int"
    """
    How many hops (number of makers)
    """

    manually_selected_outpoints: "typing.Optional[typing.List[str]]"
    """
    User selected UTXOs (optional)
    """

    def __init__(self, *, send_amount: "int", maker_count: "int", manually_selected_outpoints: "typing.Optional[typing.List[str]]"):
        self.send_amount = send_amount
        self.maker_count = maker_count
        self.manually_selected_outpoints = manually_selected_outpoints

    def __str__(self):
        return "SwapParams(send_amount={}, maker_count={}, manually_selected_outpoints={})".format(self.send_amount, self.maker_count, self.manually_selected_outpoints)

    def __eq__(self, other):
        if self.send_amount != other.send_amount:
            return False
        if self.maker_count != other.maker_count:
            return False
        if self.manually_selected_outpoints != other.manually_selected_outpoints:
            return False
        return True

class _UniffiConverterTypeSwapParams(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SwapParams(
            send_amount=_UniffiConverterUInt64.read(buf),
            maker_count=_UniffiConverterUInt32.read(buf),
            manually_selected_outpoints=_UniffiConverterOptionalSequenceString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.send_amount)
        _UniffiConverterUInt32.check_lower(value.maker_count)
        _UniffiConverterOptionalSequenceString.check_lower(value.manually_selected_outpoints)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.send_amount, buf)
        _UniffiConverterUInt32.write(value.maker_count, buf)
        _UniffiConverterOptionalSequenceString.write(value.manually_selected_outpoints, buf)


class WalletBackup:
    file_name: "str"
    def __init__(self, *, file_name: "str"):
        self.file_name = file_name

    def __str__(self):
        return "WalletBackup(file_name={})".format(self.file_name)

    def __eq__(self, other):
        if self.file_name != other.file_name:
            return False
        return True

class _UniffiConverterTypeWalletBackup(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return WalletBackup(
            file_name=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.file_name)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.file_name, buf)





class Destination:
    def __init__(self):
        raise RuntimeError("Destination cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class SWEEP:
        address: "str"

        def __init__(self,address: "str"):
            self.address = address

        def __str__(self):
            return "Destination.SWEEP(address={})".format(self.address)

        def __eq__(self, other):
            if not other.is_SWEEP():
                return False
            if self.address != other.address:
                return False
            return True
    
    class MULTI:
        outputs: "dict[str, int]"
        op_return_data: "typing.Optional[bytes]"

        def __init__(self,outputs: "dict[str, int]", op_return_data: "typing.Optional[bytes]"):
            self.outputs = outputs
            self.op_return_data = op_return_data

        def __str__(self):
            return "Destination.MULTI(outputs={}, op_return_data={})".format(self.outputs, self.op_return_data)

        def __eq__(self, other):
            if not other.is_MULTI():
                return False
            if self.outputs != other.outputs:
                return False
            if self.op_return_data != other.op_return_data:
                return False
            return True
    
    class MULTI_DYNAMIC:
        amount: "int"
        addresses: "typing.List[str]"

        def __init__(self,amount: "int", addresses: "typing.List[str]"):
            self.amount = amount
            self.addresses = addresses

        def __str__(self):
            return "Destination.MULTI_DYNAMIC(amount={}, addresses={})".format(self.amount, self.addresses)

        def __eq__(self, other):
            if not other.is_MULTI_DYNAMIC():
                return False
            if self.amount != other.amount:
                return False
            if self.addresses != other.addresses:
                return False
            return True
    
    

    # For each variant, we have `is_NAME` and `is_name` methods for easily checking
    # whether an instance is that variant.
    def is_SWEEP(self) -> bool:
        return isinstance(self, Destination.SWEEP)
    def is_sweep(self) -> bool:
        return isinstance(self, Destination.SWEEP)
    def is_MULTI(self) -> bool:
        return isinstance(self, Destination.MULTI)
    def is_multi(self) -> bool:
        return isinstance(self, Destination.MULTI)
    def is_MULTI_DYNAMIC(self) -> bool:
        return isinstance(self, Destination.MULTI_DYNAMIC)
    def is_multi_dynamic(self) -> bool:
        return isinstance(self, Destination.MULTI_DYNAMIC)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Destination.SWEEP = type("Destination.SWEEP", (Destination.SWEEP, Destination,), {})  # type: ignore
Destination.MULTI = type("Destination.MULTI", (Destination.MULTI, Destination,), {})  # type: ignore
Destination.MULTI_DYNAMIC = type("Destination.MULTI_DYNAMIC", (Destination.MULTI_DYNAMIC, Destination,), {})  # type: ignore




class _UniffiConverterTypeDestination(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Destination.SWEEP(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return Destination.MULTI(
                _UniffiConverterMapStringUInt64.read(buf),
                _UniffiConverterOptionalBytes.read(buf),
            )
        if variant == 3:
            return Destination.MULTI_DYNAMIC(
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterSequenceString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_SWEEP():
            _UniffiConverterString.check_lower(value.address)
            return
        if value.is_MULTI():
            _UniffiConverterMapStringUInt64.check_lower(value.outputs)
            _UniffiConverterOptionalBytes.check_lower(value.op_return_data)
            return
        if value.is_MULTI_DYNAMIC():
            _UniffiConverterUInt64.check_lower(value.amount)
            _UniffiConverterSequenceString.check_lower(value.addresses)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_SWEEP():
            buf.write_i32(1)
            _UniffiConverterString.write(value.address, buf)
        if value.is_MULTI():
            buf.write_i32(2)
            _UniffiConverterMapStringUInt64.write(value.outputs, buf)
            _UniffiConverterOptionalBytes.write(value.op_return_data, buf)
        if value.is_MULTI_DYNAMIC():
            buf.write_i32(3)
            _UniffiConverterUInt64.write(value.amount, buf)
            _UniffiConverterSequenceString.write(value.addresses, buf)







class TakerBehavior(enum.Enum):
    NORMAL = 0
    
    DROP_CONNECTION_AFTER_FULL_SETUP = 1
    
    BROADCAST_CONTRACT_AFTER_FULL_SETUP = 2
    


class _UniffiConverterTypeTakerBehavior(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TakerBehavior.NORMAL
        if variant == 2:
            return TakerBehavior.DROP_CONNECTION_AFTER_FULL_SETUP
        if variant == 3:
            return TakerBehavior.BROADCAST_CONTRACT_AFTER_FULL_SETUP
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == TakerBehavior.NORMAL:
            return
        if value == TakerBehavior.DROP_CONNECTION_AFTER_FULL_SETUP:
            return
        if value == TakerBehavior.BROADCAST_CONTRACT_AFTER_FULL_SETUP:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == TakerBehavior.NORMAL:
            buf.write_i32(1)
        if value == TakerBehavior.DROP_CONNECTION_AFTER_FULL_SETUP:
            buf.write_i32(2)
        if value == TakerBehavior.BROADCAST_CONTRACT_AFTER_FULL_SETUP:
            buf.write_i32(3)




# TakerError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class TakerError(Exception):
    pass

_UniffiTempTakerError = TakerError

class TakerError:  # type: ignore
    class Wallet(_UniffiTempTakerError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "TakerError.Wallet({})".format(str(self))
    _UniffiTempTakerError.Wallet = Wallet # type: ignore
    class Protocol(_UniffiTempTakerError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "TakerError.Protocol({})".format(str(self))
    _UniffiTempTakerError.Protocol = Protocol # type: ignore
    class Network(_UniffiTempTakerError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "TakerError.Network({})".format(str(self))
    _UniffiTempTakerError.Network = Network # type: ignore
    class General(_UniffiTempTakerError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "TakerError.General({})".format(str(self))
    _UniffiTempTakerError.General = General # type: ignore
    class Io(_UniffiTempTakerError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "TakerError.Io({})".format(str(self))
    _UniffiTempTakerError.Io = Io # type: ignore

TakerError = _UniffiTempTakerError # type: ignore
del _UniffiTempTakerError


class _UniffiConverterTypeTakerError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TakerError.Wallet(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return TakerError.Protocol(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return TakerError.Network(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return TakerError.General(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return TakerError.Io(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, TakerError.Wallet):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, TakerError.Protocol):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, TakerError.Network):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, TakerError.General):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, TakerError.Io):
            _UniffiConverterString.check_lower(value.msg)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, TakerError.Wallet):
            buf.write_i32(1)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, TakerError.Protocol):
            buf.write_i32(2)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, TakerError.Network):
            buf.write_i32(3)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, TakerError.General):
            buf.write_i32(4)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, TakerError.Io):
            buf.write_i32(5)
            _UniffiConverterString.write(value.msg, buf)


# WalletError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class WalletError(Exception):
    pass

_UniffiTempWalletError = WalletError

class WalletError:  # type: ignore
    class Io(_UniffiTempWalletError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "WalletError.Io({})".format(str(self))
    _UniffiTempWalletError.Io = Io # type: ignore
    class Rpc(_UniffiTempWalletError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "WalletError.Rpc({})".format(str(self))
    _UniffiTempWalletError.Rpc = Rpc # type: ignore
    class General(_UniffiTempWalletError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "WalletError.General({})".format(str(self))
    _UniffiTempWalletError.General = General # type: ignore
    class Json(_UniffiTempWalletError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "WalletError.Json({})".format(str(self))
    _UniffiTempWalletError.Json = Json # type: ignore
    class Network(_UniffiTempWalletError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "WalletError.Network({})".format(str(self))
    _UniffiTempWalletError.Network = Network # type: ignore
    class AddressParse(_UniffiTempWalletError):
        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg

        def __repr__(self):
            return "WalletError.AddressParse({})".format(str(self))
    _UniffiTempWalletError.AddressParse = AddressParse # type: ignore

WalletError = _UniffiTempWalletError # type: ignore
del _UniffiTempWalletError


class _UniffiConverterTypeWalletError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return WalletError.Io(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return WalletError.Rpc(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return WalletError.General(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return WalletError.Json(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return WalletError.Network(
                _UniffiConverterString.read(buf),
            )
        if variant == 6:
            return WalletError.AddressParse(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, WalletError.Io):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, WalletError.Rpc):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, WalletError.General):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, WalletError.Json):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, WalletError.Network):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, WalletError.AddressParse):
            _UniffiConverterString.check_lower(value.msg)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, WalletError.Io):
            buf.write_i32(1)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, WalletError.Rpc):
            buf.write_i32(2)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, WalletError.General):
            buf.write_i32(3)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, WalletError.Json):
            buf.write_i32(4)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, WalletError.Network):
            buf.write_i32(5)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, WalletError.AddressParse):
            buf.write_i32(6)
            _UniffiConverterString.write(value.msg, buf)



class _UniffiConverterOptionalUInt16(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt16.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt16.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt16.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBytes(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterBytes.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBytes.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBytes.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRpcConfig(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeRpcConfig.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRpcConfig.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRpcConfig.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeTakerBehavior(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeTakerBehavior.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeTakerBehavior.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeTakerBehavior.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterMapStringUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterUInt64.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterUInt64.read(buf)
            d[key] = val
        return d

# objects.
class TakerProtocol(typing.Protocol):
    def get_wallet_balances(self, ):
        """
        Get wallet balances
        """

        raise NotImplementedError
    def get_wallet_name(self, ):
        raise NotImplementedError
    def send_coinswap(self, swap_params: "SwapParams"):
        raise NotImplementedError
    def sync_wallet(self, ):
        raise NotImplementedError
# Taker is a Rust-only trait - it's a wrapper around a Rust implementation.
class Taker():
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_coinswap_ffi_fn_free_taker, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_coinswap_ffi_fn_clone_taker, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst
    @classmethod
    def init(cls, data_dir: "typing.Optional[str]",wallet_file_name: "typing.Optional[str]",rpc_config: "typing.Optional[RpcConfig]",behavior: "typing.Optional[TakerBehavior]",control_port: "typing.Optional[int]",tor_auth_password: "typing.Optional[str]"):
        _UniffiConverterOptionalString.check_lower(data_dir)
        
        _UniffiConverterOptionalString.check_lower(wallet_file_name)
        
        _UniffiConverterOptionalTypeRpcConfig.check_lower(rpc_config)
        
        _UniffiConverterOptionalTypeTakerBehavior.check_lower(behavior)
        
        _UniffiConverterOptionalUInt16.check_lower(control_port)
        
        _UniffiConverterOptionalString.check_lower(tor_auth_password)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(_UniffiConverterTypeTakerError,_UniffiLib.uniffi_coinswap_ffi_fn_constructor_taker_init,
        _UniffiConverterOptionalString.lower(data_dir),
        _UniffiConverterOptionalString.lower(wallet_file_name),
        _UniffiConverterOptionalTypeRpcConfig.lower(rpc_config),
        _UniffiConverterOptionalTypeTakerBehavior.lower(behavior),
        _UniffiConverterOptionalUInt16.lower(control_port),
        _UniffiConverterOptionalString.lower(tor_auth_password))
        return cls._make_instance_(pointer)



    def get_wallet_balances(self, ) -> "Balances":
        """
        Get wallet balances
        """

        return _UniffiConverterTypeBalances.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeTakerError,_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_get_wallet_balances,self._uniffi_clone_pointer(),)
        )





    def get_wallet_name(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeTakerError,_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_get_wallet_name,self._uniffi_clone_pointer(),)
        )





    def send_coinswap(self, swap_params: "SwapParams") -> None:
        _UniffiConverterTypeSwapParams.check_lower(swap_params)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeTakerError,_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_send_coinswap,self._uniffi_clone_pointer(),
        _UniffiConverterTypeSwapParams.lower(swap_params))






    def sync_wallet(self, ) -> None:
        _uniffi_rust_call_with_error(_UniffiConverterTypeTakerError,_UniffiLib.uniffi_coinswap_ffi_fn_method_taker_sync_wallet,self._uniffi_clone_pointer(),)







class _UniffiConverterTypeTaker:

    @staticmethod
    def lift(value: int):
        return Taker._make_instance_(value)

    @staticmethod
    def check_lower(value: Taker):
        if not isinstance(value, Taker):
            raise TypeError("Expected Taker instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: TakerProtocol):
        if not isinstance(value, Taker):
            raise TypeError("Expected Taker instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: TakerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class WalletProtocol(typing.Protocol):
    pass
# Wallet is a Rust-only trait - it's a wrapper around a Rust implementation.
class Wallet():
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_coinswap_ffi_fn_free_wallet, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_coinswap_ffi_fn_clone_wallet, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst



class _UniffiConverterTypeWallet:

    @staticmethod
    def lift(value: int):
        return Wallet._make_instance_(value)

    @staticmethod
    def check_lower(value: Wallet):
        if not isinstance(value, Wallet):
            raise TypeError("Expected Wallet instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: WalletProtocol):
        if not isinstance(value, Wallet):
            raise TypeError("Expected Wallet instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: WalletProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))

# Async support

def create_default_rpc_config() -> "RpcConfig":
    return _UniffiConverterTypeRpcConfig.lift(_uniffi_rust_call(_UniffiLib.uniffi_coinswap_ffi_fn_func_create_default_rpc_config,))


def create_swap_params(send_amount_sats: "int",maker_count: "int",outpoints: "typing.List[str]") -> "SwapParams":
    _UniffiConverterUInt64.check_lower(send_amount_sats)
    
    _UniffiConverterUInt32.check_lower(maker_count)
    
    _UniffiConverterSequenceString.check_lower(outpoints)
    
    return _UniffiConverterTypeSwapParams.lift(_uniffi_rust_call(_UniffiLib.uniffi_coinswap_ffi_fn_func_create_swap_params,
        _UniffiConverterUInt64.lower(send_amount_sats),
        _UniffiConverterUInt32.lower(maker_count),
        _UniffiConverterSequenceString.lower(outpoints)))


__all__ = [
    "InternalError",
    "Destination",
    "TakerBehavior",
    "TakerError",
    "WalletError",
    "Balances",
    "RpcConfig",
    "SwapParams",
    "WalletBackup",
    "create_default_rpc_config",
    "create_swap_params",
    "Taker",
    "Wallet",
]

